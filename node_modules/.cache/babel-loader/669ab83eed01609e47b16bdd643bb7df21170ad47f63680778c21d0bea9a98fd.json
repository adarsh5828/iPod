{"ast":null,"code":"var _jsxFileName = \"C:\\\\Desktop\\\\Adarsh\\\\React-Projects\\\\ipod-new\\\\scaffold\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport Screen from './components/Screen';\nimport ZingTouch from 'zingtouch';\nimport Controls from './components/Controls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.rotateEvent = () => {\n      const myRegion = new ZingTouch.Region(document.getElementById('controls'));\n      const rotateArea = document.getElementById('wheel');\n      let lastRotateTime = Date.now(); // Add throttle to avoid rapid switching\n\n      myRegion.bind(rotateArea, 'rotate', event => {\n        const now = Date.now();\n        if (now - lastRotateTime < 250) return;\n        lastRotateTime = now;\n\n        // Decide which menu to rotate\n        let menuLists;\n        if (this.state.display.sideMenu) {\n          menuLists = document.querySelectorAll('#side-menu tr');\n        } else if (this.state.display.music) {\n          menuLists = document.querySelectorAll('#music-menu tr');\n        } else {\n          return;\n        }\n        const distanceFromLast = event.detail.distanceFromLast;\n        let currentIndex = -1;\n\n        // Find the currently active index\n        menuLists.forEach((item, index) => {\n          if (item.classList.contains('active')) {\n            currentIndex = index;\n          }\n        });\n\n        // If no active item, default to first option\n        if (currentIndex === -1 && menuLists.length > 1) {\n          menuLists[1].classList.add('active');\n          return;\n        }\n        menuLists[currentIndex].classList.remove('active');\n        if (distanceFromLast > 0) {\n          // Clockwise\n          const nextIndex = currentIndex === menuLists.length - 1 ? 1 : currentIndex + 1;\n          menuLists[nextIndex].classList.add('active');\n        } else if (distanceFromLast < 0) {\n          // Counter-clockwise\n          const prevIndex = currentIndex === 1 ? menuLists.length - 1 : currentIndex - 1;\n          menuLists[prevIndex].classList.add('active');\n        }\n      });\n    };\n    // If ok button is clicked,  open the selected component\n    this.handleOk = () => {\n      const activeMenu = document.querySelector('#side-menu .active');\n      const activeItemInMusic = document.querySelector('#music-menu .active');\n\n      // If the active item is of SideMenu component\n      if (activeMenu) {\n        const optionSelected = activeMenu.getAttribute('data-option');\n        const display = this.state.display;\n        // Mark all the display as false\n        for (let key in display) {\n          // Note here 'in' and not 'of'\n          display[key] = false;\n        }\n\n        // Then mark true to the option selected\n        display[optionSelected] = true;\n\n        // Set state to render the components to open the relevant component\n        this.setState({\n          display: display,\n          activeItemInMenu: optionSelected\n        });\n      }\n      // If the active item is of MusicMenu component\n      else if (activeItemInMusic) {\n        const optionSelected = activeItemInMusic.getAttribute('data-option');\n        this.setState({\n          toShowInMusicComponent: optionSelected,\n          activeItemInMusic: optionSelected\n        });\n      }\n    };\n    // If menu button is clicked, go back to the menu screen\n    // If menu button is clicked, go back\n    this.handleMenuClick = () => {\n      // If component of SideMenu was opened, then go back to SideMenu\n      if (this.state.toShowInMusicComponent === 'musicMenu') {\n        const display = this.state.display;\n        // Mark all the display as false\n        for (let key in display) {\n          // Note here 'in' and not 'of'\n          display[key] = false;\n        }\n\n        // Then mark true to the option selected\n        display.sideMenu = true;\n        this.setState({\n          display: display,\n          activeItemInMusic: 'allSongs'\n        });\n      }\n      // If component of MusicMene was opened, then go back to MusicMenu\n      else {\n        // Means toShowInMusicComponent != 'musicMenu'. Set it 'musicMenu'\n        const optionSelected = this.state.toShowInMusicComponent;\n        this.setState({\n          toShowInMusicComponent: 'musicMenu',\n          activeItemInMusic: optionSelected\n        });\n      }\n    };\n    this.state = {\n      display: {\n        'sideMenu': true,\n        coverflow: false,\n        'music': false,\n        'games': false,\n        'settings': false\n      },\n      activeItemInMenu: 'coverflow',\n      activeItemInMusic: 'allSongs',\n      toShowInMusicComponent: 'musicMenu'\n    };\n  }\n  componentDidMount() {\n    this.rotateEvent(); // This ensures ZingTouch binds after the DOM is ready\n  }\n\n  render() {\n    const {\n      display,\n      activeItemInMenu,\n      toShowInMusicComponent,\n      activeItemInMusic\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"iPod-app\",\n      children: [/*#__PURE__*/_jsxDEV(Screen, {\n        display: display,\n        activeItemInMenu: activeItemInMenu,\n        toShowInMusicComponent: toShowInMusicComponent,\n        activeItemInMusic: activeItemInMusic\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {\n        handleOk: this.handleOk,\n        handleMenuClick: this.handleMenuClick,\n        rotateEvent: this.rotateEvent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Screen","ZingTouch","Controls","jsxDEV","_jsxDEV","App","Component","constructor","rotateEvent","myRegion","Region","document","getElementById","rotateArea","lastRotateTime","Date","now","bind","event","menuLists","state","display","sideMenu","querySelectorAll","music","distanceFromLast","detail","currentIndex","forEach","item","index","classList","contains","length","add","remove","nextIndex","prevIndex","handleOk","activeMenu","querySelector","activeItemInMusic","optionSelected","getAttribute","key","setState","activeItemInMenu","toShowInMusicComponent","handleMenuClick","coverflow","componentDidMount","render","id","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Desktop/Adarsh/React-Projects/ipod-new/scaffold/src/App.js"],"sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport Screen from './components/Screen';\r\nimport ZingTouch from 'zingtouch';\r\nimport Controls from './components/Controls';\r\nclass App extends React.Component{\r\n\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      display:{\r\n        'sideMenu':true, coverflow:false, 'music':false, 'games':false, 'settings':false\r\n      },\r\n      activeItemInMenu:'coverflow',\r\n      activeItemInMusic:'allSongs',\r\n      toShowInMusicComponent:'musicMenu'\r\n    }\r\n  }\r\nrotateEvent = () => {\r\n  const myRegion = new ZingTouch.Region(document.getElementById('controls'));\r\n  const rotateArea = document.getElementById('wheel');\r\n\r\n  let lastRotateTime = Date.now(); // Add throttle to avoid rapid switching\r\n\r\n  myRegion.bind(rotateArea, 'rotate', (event) => {\r\n    const now = Date.now();\r\n    if (now - lastRotateTime < 250) return;\r\n    lastRotateTime = now;\r\n\r\n    // Decide which menu to rotate\r\n    let menuLists;\r\n    if (this.state.display.sideMenu) {\r\n      menuLists = document.querySelectorAll('#side-menu tr');\r\n    } else if (this.state.display.music) {\r\n      menuLists = document.querySelectorAll('#music-menu tr');\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    const distanceFromLast = event.detail.distanceFromLast;\r\n\r\n    let currentIndex = -1;\r\n\r\n    // Find the currently active index\r\n    menuLists.forEach((item, index) => {\r\n      if (item.classList.contains('active')) {\r\n        currentIndex = index;\r\n      }\r\n    });\r\n\r\n    // If no active item, default to first option\r\n    if (currentIndex === -1 && menuLists.length > 1) {\r\n      menuLists[1].classList.add('active');\r\n      return;\r\n    }\r\n\r\n    menuLists[currentIndex].classList.remove('active');\r\n\r\n    if (distanceFromLast > 0) {\r\n      // Clockwise\r\n      const nextIndex = currentIndex === menuLists.length - 1 ? 1 : currentIndex + 1;\r\n      menuLists[nextIndex].classList.add('active');\r\n    } else if (distanceFromLast < 0) {\r\n      // Counter-clockwise\r\n      const prevIndex = currentIndex === 1 ? menuLists.length - 1 : currentIndex - 1;\r\n      menuLists[prevIndex].classList.add('active');\r\n    }\r\n  });\r\n};\r\n\r\n\r\ncomponentDidMount() {\r\n  this.rotateEvent(); // This ensures ZingTouch binds after the DOM is ready\r\n}\r\n\r\n  // If ok button is clicked,  open the selected component\r\n\r\n   handleOk = () => {\r\n    const activeMenu = document.querySelector('#side-menu .active');\r\n    const activeItemInMusic = document.querySelector('#music-menu .active');\r\n\r\n    // If the active item is of SideMenu component\r\n    if(activeMenu){\r\n      const optionSelected = activeMenu.getAttribute('data-option');\r\n\r\n      const display = this.state.display;\r\n      // Mark all the display as false\r\n      for(let key in display){  // Note here 'in' and not 'of'\r\n        display[key] = false;\r\n      }\r\n\r\n      // Then mark true to the option selected\r\n      display[optionSelected] = true;\r\n\r\n      // Set state to render the components to open the relevant component\r\n      this.setState({\r\n        display: display,\r\n        activeItemInMenu: optionSelected\r\n      });\r\n    }\r\n    // If the active item is of MusicMenu component\r\n    else if(activeItemInMusic){\r\n      const optionSelected = activeItemInMusic.getAttribute('data-option');\r\n      this.setState({\r\n        toShowInMusicComponent: optionSelected,\r\n        activeItemInMusic: optionSelected\r\n      });\r\n    }\r\n  }\r\n\r\n  // If menu button is clicked, go back to the menu screen\r\n\r\n    // If menu button is clicked, go back\r\n  handleMenuClick = () => {\r\n\r\n    // If component of SideMenu was opened, then go back to SideMenu\r\n    if(this.state.toShowInMusicComponent === 'musicMenu'){\r\n      const display = this.state.display;\r\n      // Mark all the display as false\r\n      for(let key in display){  // Note here 'in' and not 'of'\r\n        display[key] = false;\r\n      }\r\n\r\n      // Then mark true to the option selected\r\n      display.sideMenu = true;\r\n\r\n      this.setState({ \r\n        display: display,\r\n        activeItemInMusic: 'allSongs'\r\n      });\r\n    }\r\n    // If component of MusicMene was opened, then go back to MusicMenu\r\n    else{ // Means toShowInMusicComponent != 'musicMenu'. Set it 'musicMenu'\r\n      const optionSelected = this.state.toShowInMusicComponent;\r\n      this.setState({ \r\n        toShowInMusicComponent: 'musicMenu',\r\n        activeItemInMusic: optionSelected\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  render(){\r\n     const { display, activeItemInMenu, toShowInMusicComponent, activeItemInMusic } \r\n     = this.state;\r\n    return (\r\n      <div id=\"iPod-app\">\r\n        <Screen\r\n          display={display}\r\n          activeItemInMenu={activeItemInMenu}\r\n          toShowInMusicComponent={toShowInMusicComponent}\r\n          activeItemInMusic={activeItemInMusic}\r\n          />\r\n        <Controls \r\n          handleOk={this.handleOk}\r\n          handleMenuClick={this.handleMenuClick}\r\n          rotateEvent={this.rotateEvent}\r\n\r\n          />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}