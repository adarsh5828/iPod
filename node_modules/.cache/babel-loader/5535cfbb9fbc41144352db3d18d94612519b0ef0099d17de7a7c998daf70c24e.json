{"ast":null,"code":"var _jsxFileName = \"C:\\\\Desktop\\\\Adarsh\\\\React-Projects\\\\ipod-new\\\\scaffold\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport Screen from './components/Screen';\nimport ZingTouch from 'zingtouch';\nimport Controls from './components/Controls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor() {\n    super();\n    // Handle the rotate event fired from the control component\n    this.rotateEvent = () => {\n      // Handle the rotate event fired from the control component\n      const myRegion = new ZingTouch.Region(document.getElementById('controls'));\n      const rotateArea = document.getElementById('wheel');\n      myRegion.bind(rotateArea, 'rotate', function (event) {\n        const menuLists = document.querySelectorAll('tr');\n        const distanceFromLast = event.detail.distanceFromLast;\n\n        // If rotated in clockwise direction\n        if (distanceFromLast > 1) {\n          for (let i = 1; i < menuLists.length; i++) {\n            // If list contains active class then remove it and add it to the next list\n            if (menuLists[i].contains('active') === true) {\n              menuLists[i].remove('active');\n\n              // Before adding check whether it's the last item/list\n              if (i === menuLists.length - 1) {\n                menuLists[1].classList.add('active');\n              } else {\n                menuLists[++i].classList.add('active');\n              }\n            }\n          }\n        }\n        // else if rotated in anti-clockwise direction\n        else if (distanceFromLast < -1) {\n          for (let i = menuLists.length - 1; i >= 1; i--) {\n            if (menuLists[i].contains('active') == true) {\n              menuLists[i].remove('active');\n              // Before adding check whether it's the first item/list\n              if (i === 1) {\n                menuLists[menuLists.length - 1].classList.add('active');\n              } else {\n                menuLists[--i].classList.add('active');\n              }\n            }\n          }\n        }\n      });\n    };\n    // If ok button is clicked,  open the selected component\n    this.handleOk = () => {\n      const activeMenu = document.querySelector('#side-menu .active');\n      const activeItemInMusic = document.querySelector('#music-menu .active');\n\n      // If the active item is of SideMenu component\n      if (activeMenu) {\n        const optionSelected = activeMenu.getAttribute('data-option');\n        const display = this.state.display;\n        // Mark all the display as false\n        for (let key in display) {\n          // Note here 'in' and not 'of'\n          display[key] = false;\n        }\n\n        // Then mark true to the option selected\n        display[optionSelected] = true;\n\n        // Set state to render the components to open the relevant component\n        this.setState({\n          display: display,\n          activeItemInMenu: optionSelected\n        });\n      }\n      // If the active item is of MusicMenu component\n      else if (activeItemInMusic) {\n        const optionSelected = activeItemInMusic.getAttribute('data-option');\n        this.setState({\n          toShowInMusicComponent: optionSelected,\n          activeItemInMusic: optionSelected\n        });\n      }\n    };\n    // If menu button is clicked, go back to the menu screen\n    // If menu button is clicked, go back\n    this.handleMenuClick = () => {\n      // If component of SideMenu was opened, then go back to SideMenu\n      if (this.state.toShowInMusicComponent === 'musicMenu') {\n        const display = this.state.display;\n        // Mark all the display as false\n        for (let key in display) {\n          // Note here 'in' and not 'of'\n          display[key] = false;\n        }\n\n        // Then mark true to the option selected\n        display.sideMenu = true;\n        this.setState({\n          display: display,\n          activeItemInMusic: 'allSongs'\n        });\n      }\n      // If component of MusicMene was opened, then go back to MusicMenu\n      else {\n        // Means toShowInMusicComponent != 'musicMenu'. Set it 'musicMenu'\n        const optionSelected = this.state.toShowInMusicComponent;\n        this.setState({\n          toShowInMusicComponent: 'musicMenu',\n          activeItemInMusic: optionSelected\n        });\n      }\n    };\n    this.state = {\n      display: {\n        'sideMenu': false,\n        coverflow: true,\n        'music': false,\n        'games': false,\n        'settings': false\n      },\n      activeItemInMenu: 'coverflow',\n      activeItemInMusic: 'allSongs',\n      toShowInMusicComponent: 'musicMenu'\n    };\n  }\n  render() {\n    const {\n      display,\n      activeItemInMenu,\n      toShowInMusicComponent,\n      activeItemInMusic\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"iPod-app\",\n      children: [/*#__PURE__*/_jsxDEV(Screen, {\n        display: display,\n        activeItemInMenu: activeItemInMenu,\n        toShowInMusicComponent: toShowInMusicComponent,\n        activeItemInMusic: activeItemInMusic\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {\n        handleOk: this.handleOk,\n        handleMenuClick: this.handleMenuClick,\n        rotateEvent: this.rotateEvent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Screen","ZingTouch","Controls","jsxDEV","_jsxDEV","App","Component","constructor","rotateEvent","myRegion","Region","document","getElementById","rotateArea","bind","event","menuLists","querySelectorAll","distanceFromLast","detail","i","length","contains","remove","classList","add","handleOk","activeMenu","querySelector","activeItemInMusic","optionSelected","getAttribute","display","state","key","setState","activeItemInMenu","toShowInMusicComponent","handleMenuClick","sideMenu","coverflow","render","id","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Desktop/Adarsh/React-Projects/ipod-new/scaffold/src/App.js"],"sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport Screen from './components/Screen';\r\nimport ZingTouch from 'zingtouch';\r\nimport Controls from './components/Controls';\r\nclass App extends React.Component{\r\n\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      display:{\r\n        'sideMenu':false, coverflow:true, 'music':false, 'games':false, 'settings':false\r\n      },\r\n      activeItemInMenu:'coverflow',\r\n      activeItemInMusic:'allSongs',\r\n      toShowInMusicComponent:'musicMenu'\r\n    }\r\n  }\r\n// Handle the rotate event fired from the control component\r\n  rotateEvent=()=>{\r\n// Handle the rotate event fired from the control component\r\n   const myRegion = new ZingTouch.Region(document.getElementById('controls'));\r\n   const rotateArea =  document.getElementById('wheel');\r\n\r\n   myRegion.bind(rotateArea,'rotate',function(event){\r\n    const menuLists = document.querySelectorAll('tr');\r\n    const distanceFromLast = event.detail.distanceFromLast;\r\n\r\n            // If rotated in clockwise direction\r\n            if(distanceFromLast > 1){\r\n              for(let i=1;i<menuLists.length;i++){\r\n                 // If list contains active class then remove it and add it to the next list\r\n                 if(menuLists[i].contains('active')===true){\r\n                  menuLists[i].remove('active');\r\n\r\n                   // Before adding check whether it's the last item/list\r\n                   if(i===menuLists.length-1){\r\n                    menuLists[1].classList.add('active');\r\n                   }else{\r\n                    menuLists[++i].classList.add('active');\r\n                   }\r\n                 }\r\n              }\r\n            }\r\n             // else if rotated in anti-clockwise direction\r\n            else if(distanceFromLast < -1){\r\n                for(let i=menuLists.length-1;i>=1;i--){\r\n                  if(menuLists[i].contains('active')==true){\r\n                    menuLists[i].remove('active');\r\n                    // Before adding check whether it's the first item/list\r\n                     if(i === 1){\r\n                menuLists[menuLists.length-1].classList.add('active');\r\n              }else{\r\n                menuLists[--i].classList.add('active');\r\n              }\r\n                  }\r\n                }\r\n            }\r\n   });\r\n  }\r\n\r\n  \r\n\r\n  // If ok button is clicked,  open the selected component\r\n\r\n   handleOk = () => {\r\n    const activeMenu = document.querySelector('#side-menu .active');\r\n    const activeItemInMusic = document.querySelector('#music-menu .active');\r\n\r\n    // If the active item is of SideMenu component\r\n    if(activeMenu){\r\n      const optionSelected = activeMenu.getAttribute('data-option');\r\n\r\n      const display = this.state.display;\r\n      // Mark all the display as false\r\n      for(let key in display){  // Note here 'in' and not 'of'\r\n        display[key] = false;\r\n      }\r\n\r\n      // Then mark true to the option selected\r\n      display[optionSelected] = true;\r\n\r\n      // Set state to render the components to open the relevant component\r\n      this.setState({\r\n        display: display,\r\n        activeItemInMenu: optionSelected\r\n      });\r\n    }\r\n    // If the active item is of MusicMenu component\r\n    else if(activeItemInMusic){\r\n      const optionSelected = activeItemInMusic.getAttribute('data-option');\r\n      this.setState({\r\n        toShowInMusicComponent: optionSelected,\r\n        activeItemInMusic: optionSelected\r\n      });\r\n    }\r\n  }\r\n\r\n  // If menu button is clicked, go back to the menu screen\r\n\r\n    // If menu button is clicked, go back\r\n  handleMenuClick = () => {\r\n\r\n    // If component of SideMenu was opened, then go back to SideMenu\r\n    if(this.state.toShowInMusicComponent === 'musicMenu'){\r\n      const display = this.state.display;\r\n      // Mark all the display as false\r\n      for(let key in display){  // Note here 'in' and not 'of'\r\n        display[key] = false;\r\n      }\r\n\r\n      // Then mark true to the option selected\r\n      display.sideMenu = true;\r\n\r\n      this.setState({ \r\n        display: display,\r\n        activeItemInMusic: 'allSongs'\r\n      });\r\n    }\r\n    // If component of MusicMene was opened, then go back to MusicMenu\r\n    else{ // Means toShowInMusicComponent != 'musicMenu'. Set it 'musicMenu'\r\n      const optionSelected = this.state.toShowInMusicComponent;\r\n      this.setState({ \r\n        toShowInMusicComponent: 'musicMenu',\r\n        activeItemInMusic: optionSelected\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  render(){\r\n     const { display, activeItemInMenu, toShowInMusicComponent, activeItemInMusic } \r\n     = this.state;\r\n    return (\r\n      <div id=\"iPod-app\">\r\n        <Screen\r\n          display={display}\r\n          activeItemInMenu={activeItemInMenu}\r\n          toShowInMusicComponent={toShowInMusicComponent}\r\n          activeItemInMusic={activeItemInMusic}\r\n          />\r\n        <Controls \r\n          handleOk={this.handleOk}\r\n          handleMenuClick={this.handleMenuClick}\r\n          rotateEvent={this.rotateEvent}\r\n\r\n          />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}